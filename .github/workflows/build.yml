name: Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.toml
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

      - name: Build modules/APKs
        run: ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Report to Telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
        if: env.TG_TOKEN != null
        run: |
          cd build || { echo "build folder not found"; exit 1; }

          TG_CHAT="@rvc_magisk"
          NL=$'\n'
          APKS=""
          MODULES=""
          for OUTPUT in *; do
            DL_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            if [[ $OUTPUT = *.apk ]]; then
              APKS+="${NL}�[${OUTPUT}](${DL_URL})"
            elif [[ $OUTPUT = *.zip ]]; then
              MODULES+="${NL}�[${OUTPUT}](${DL_URL})"
            fi
          done
          MODULES=${MODULES#"$NL"}
          APKS=${APKS#"$NL"}

          BODY="$(sed 's/^\* \*\*/↪ \*\*/g; s/^\* `/↪ \*\*/g; s/`/\*/g; s/^\* /\↪/g; s/\*\*/\*/g; s/###//g; s/^- /↪ /g; /^==/d;' ../build.md)"
          MSG="*New build!*

          ${BODY}

          *▼ Download Links:*
          Modules:
          ${MODULES}

          APKs:
          ${APKS}
          "
          echo "'$MSG'"
          MSG=${MSG:0:9450}
          POST="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          curl -X POST --data-urlencode "parse_mode=Markdown" --data-urlencode "disable_web_page_preview=true" --data-urlencode "text=${MSG}" --data-urlencode "chat_id=${TG_CHAT}" "$POST"

      - name: Generate GitHub Pages index.html
        run: |
          mkdir -p docs
          cat <<EOF > docs/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ReVanced Apps - Latest Release</title>
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
              <style>
                  body {
                      display: flex;
                      min-height: 100vh;
                      flex-direction: column;
                  }
                  main {
                      flex: 1 0 auto;
                  }
                  .container {
                      margin-top: 50px;
                  }
              </style>
          </head>
          <body>
              <nav>
                  <div class="nav-wrapper">
                      <a href="#" class="brand-logo center">ReVanced Apps</a>
                  </div>
              </nav>
              <main>
                  <div class="container">
                      <h4>Latest Release</h4>
                      <table class="highlight">
                          <thead>
                              <tr>
                                  <th>Name</th>
                                  <th>Version</th>
                                  <th>Link</th>
                              </tr>
                          </thead>
                          <tbody id="release-table">
                              <!-- Data will be populated here -->
                          </tbody>
                      </table>
                  </div>
              </main>
              <footer class="page-footer">
                  <div class="container">
                      <div class="row">
                          <div class="col l6 s12">
                              <h5 class="white-text">ReVanced Apps</h5>
                              <p class="grey-text text-lighten-4">Listing all assets from the latest release.</p>
                          </div>
                      </div>
                  </div>
              </footer>
              <script>
                  document.addEventListener('DOMContentLoaded', function() {
                      fetch('https://api.github.com/repos/${{ github.repository }}/releases/latest')
                          .then(response => response.json())
                          .then(data => {
                              const table = document.getElementById('release-table');
                              data.assets.forEach(asset => {
                                  const row = document.createElement('tr');
                                  const nameCell = document.createElement('td');
                                  const versionCell = document.createElement('td');
                                  const linkCell = document.createElement('td');
                                  const link = document.createElement('a');

                                  nameCell.textContent = asset.name;
                                  versionCell.textContent = data.tag_name;
                                  link.href = asset.browser_download_url;
                                  link.textContent = 'Download';
                                  link.target = '_blank';

                                  linkCell.appendChild(link);
                                  row.appendChild(nameCell);
                                  row.appendChild(versionCell);
                                  row.appendChild(linkCell);
                                  table.appendChild(row);
                              });
                          })
                          .catch(error => console.error('Error fetching release data:', error));
                  });
              </script>
              <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
          </body>
          </html>
          EOF

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          skip_checkout: true
          file_pattern: docs/index.html
          commit_message: Update GitHub Pages with latest release information
